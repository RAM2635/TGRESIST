import logging
from telebot import TeleBot, types
from openai import OpenAI
from gtts import gTTS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¶–≤–µ—Ç–∞ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
colors = {
    "Black": 0, "Brown": 1, "Red": 2, "Orange": 3, "Yellow": 4,
    "Green": 5, "Blue": 6, "Violet": 7, "Gray": 8, "White": 9,
    "Gold": -1, "Silver": -2
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª—å—Ü–∞
band_colors = ["Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Gray", "White"]
multiplier_colors = band_colors + ["Gold", "Silver"]
tolerance_colors = ["Brown", "Red", "Green", "Blue", "Violet", "Gray", "Gold", "Silver"]

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
color_emojis = {
    "Black": "‚¨õÔ∏è", "Brown": "üü´", "Red": "üü•", "Orange": "üüß", "Yellow": "üü®",
    "Green": "üü©", "Blue": "üü¶", "Violet": "üü™", "Gray": "‚¨úÔ∏è", "White": "‚¨úÔ∏è",
    "Gold": "üü®", "Silver": "‚¨úÔ∏è"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API
client = OpenAI(
    api_key="***",
    base_url="https://api.proxyapi.ru/openai/v1",
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª–∞ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞
def calculate_resistance(band1, band2, multiplier, tolerance):
    base_value = (colors[band1] * 10 + colors[band2]) * (10 ** colors[multiplier])
    tolerance_value = f"{colors[tolerance]}%"
    if base_value >= 1e6:
        return f"{base_value / 1e6:.2f} MŒ©", tolerance_value
    elif base_value >= 1e3:
        return f"{base_value / 1e3:.2f} kŒ©", tolerance_value
    else:
        return f"{base_value:.2f} Œ©", tolerance_value

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
def create_color_buttons(color_list, prefix):
    buttons = []
    row = []
    for color in color_list:
        button_text = f"{color_emojis[color]} {color}"
        row.append(types.InlineKeyboardButton(text=button_text, callback_data=f"{prefix}_{color}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return types.InlineKeyboardMarkup(buttons)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
def ai_speak(text):
    try:
        chat_completion = client.chat.completions.create(
            model="gpt-3.5-turbo-1106", messages=[{"role": "user", "content": text}]
        )
        return chat_completion.choices[0].message['content']
    except Exception as e:
        logger.error(f"Error communicating with OpenAI: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def text_to_speech(text, filename="output.mp3"):
    tts = gTTS(text=text, lang='ru')
    tts.save(filename)
    return filename

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot("***")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

def send_voice_message(chat_id, text):
    audio_file = text_to_speech(text)
    with open(audio_file, 'rb') as audio:
        bot.send_voice(chat_id, audio)

@bot.message_handler(commands=['start'])
def start(message):
    text = "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–æ–º–∏–Ω–∞–ª –≤–∞—à–µ–≥–æ —Ä–µ–∑–∏—Å—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–ª—å—Ü–∞."
    keyboard = create_color_buttons(band_colors, "band1")
    bot.send_message(message.chat.id, text, reply_markup=keyboard)
    send_voice_message(message.chat.id, text)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    data = call.data
    state = bot.user_data.get(call.from_user.id, {})

    if "band1" in data:
        state['band1'] = data.split('_')[1]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {state['band1']} –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–ª—å—Ü–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–ª—å—Ü–∞."
        keyboard = create_color_buttons(band_colors, "band2")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
        send_voice_message(call.message.chat.id, text)

    elif "band2" in data:
        state['band2'] = data.split('_')[1]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {state['band2']} –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–ª—å—Ü–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ –∫–æ–ª—å—Ü–∞ (–º–Ω–æ–∂–∏—Ç–µ–ª—å)."
        keyboard = create_color_buttons(multiplier_colors, "multiplier")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
        send_voice_message(call.message.chat.id, text)

    elif "multiplier" in data:
        state['multiplier'] = data.split('_')[1]
        text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {state['multiplier']} –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∫–æ–ª—å—Ü–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∫–æ–ª—å—Ü–∞ (–¥–æ–ø—É—Å–∫)."
        keyboard = create_color_buttons(tolerance_colors, "tolerance")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
        send_voice_message(call.message.chat.id, text)

    elif "tolerance" in data:
        state['tolerance'] = data.split('_')[1]
        resistance, tolerance = calculate_resistance(state['band1'], state['band2'], state['multiplier'], state['tolerance'])
        text = f"–í–∞—à —Ä–µ–∑–∏—Å—Ç–æ—Ä –∏–º–µ–µ—Ç –Ω–æ–º–∏–Ω–∞–ª {resistance} —Å –¥–æ–ø—É—Å–∫–æ–º {tolerance}. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
        send_voice_message(call.message.chat.id, text)

    bot.user_data[call.from_user.id] = state

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    bot.polling()

if __name__ == '__main__':
    bot.user_data = {}
    main()







